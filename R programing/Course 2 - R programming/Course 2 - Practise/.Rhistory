> a <- "This is a sample string"
a <- "This is a sample string"
a <- "This is a sample string"
print(a)
a=c("one","two","three")
print(a)
a=c("one","two","three")
print(a)
a=c("one","two","three")
ls(a)
ls(a)
print(a)
a <- c("one","two","three")
b <- c("red", "white", "red", NA)
print(a)
print(b)
# Assign value to variable
a <- c("one","two","three")
b <- c("red", "white", "red", NA)
# Print values
print(a)
print(b)
# Assign value to variable
a <- c("one","two","three")
b <- c("red", "white", "red", NA)
# Print values
print(a)
print(b)
# Assign value to variable
a <- c("one","two","three")
b <- c("red", "white", "red", NA)
c <- 4+3
# Print values
print(a)
print(b)
print(c)
# Assign value to variable
a <- c("one","two","three")
b <- c("red", "white", "red", NA)
c <- 4+3
# Print values
print(a) print(b) print(c)
cat(a)
cat(b)
cat(c)
class(a)
class(a)
class(b)
class(c)
class(d)
d = as.integer(3)
class(d)
e <- "Character example"
class(e)
class(b)
f <- sprintf("%s has %d dollars", "Sam", 100)
print(f)
# Assign value to variable
a <- c("one","two","three")
b <- c("red", "white", "red", NA)
c <- 4+3
d = as.integer(3)
e <- "Character example"
f <- sprintf("%s has %d dollars", "Sam", 100)
class(b)
g <- c(1,2,3,5,7)
class(g)
cat(g)
print(g)
length(g)
length(c)
length(b)
length(a)
h <- c(a,c)
print(h)
a[1]
b[3]
a[0]
a[2]
A = matrix( c(2, 4, 3, 1, 5, 7), nrow=2, ncol=3, byrow = TRUE)
A
x = list(a,b,c)
x[2]
x = list(a,b,c)
x[2]
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
d1 = c(2, 3, 5)
d2 = c("aa", "bb", "cc")
d3 = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
d1 = c(2, 3, 5)
d2 = c("aa", "bb", "cc")
d3 = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
library(gdata)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(gdata)
help(read.xls)
mydata = read.xls("mydata.xls")
mydata = read.xls("products.xls")
mydata = read.xls("D:\Software Engineering\Coding\R programing\products.xls")
mydata = read.xls("D:/Software Engineering/Coding/R programing/products.xls")
install.pacpages("gdata");
install.packages("gdata");
mydata = read.xls("D:/Software Engineering/Coding/R programing/products.xls")
mydata = read.xls("D:/Software Engineering/Coding/R programing/products.xls", sheet=1, perl="C:/Perl/bin/perl.exe")
install.packages("xlsx")
readxlsx = read.xlsx("products.xlsx")
readxlsx = read.xlsx("products.xlsx")
readxls= read.xls("D:/Software Engineering/Coding/R programing/products.xls", sheet=1, perl="C:/Perl/bin/perl.exe")
readxls= read.xls("products.xls")
readxlsx = read.xlsx("products.xlsx")
q()
readxls= read.xls("products.xls")
install.packages("gdata");
readxls= read.xls("products.xls")
readxls = read.xls("products.xls")
help(read.xls)
install.packages("xlsx")
install.packages("xls")
readxls = read.xls("products.xls")
library(readxl)
products <- read_excel("D:/Software Engineering/Coding/R programing/products.xlsx")
View(products)
products
readxlsx = read.xlsx("products.xlsx")
readxlsx = read_excel("D:/Software Engineering/Coding/R programing/products.xlsx")
readxlsx
library(readxl)
xproducts = read_excel("D:/Software Engineering/Coding/R programing/products.xlsx")
view(xproducts)
xproducts
class(products)
pnorm(84, mean=72, sd=15.2, lower.tail=FALSE)
kings = scan("D:/Software Engineering/Coding/R programing/king.txt")
ts.kings = ts(kings)
plot.ts(ts.kings)
kings = scan("D:/Software Engineering/Coding/R programing/kings.txt")
ts.kings = ts(kings)
plot.ts(ts.kings)
kings = scan("D:/Software Engineering/Coding/R programing/kings.txt")
ts.kings = ts(kings)
plot.ts(ts.kings)
con <- url("http://www.jhsp.edu", r)
con <- url("http://www.jhsp.edu", "r)
con <- url("http://www.jhsp.edu", "r")
con <- url("http://www.jhsp.edu", "r")
x <- readLines(con)
head(x)
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[1:4]
x[x > "a"]
x[x > "b"]
u <- x > "b"
u
u <- x > "b"
x[u]
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x["bar"]
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x["bar"]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,3)]
x <- list(a = list(10,12,14), b = c(3.14, 2.81))
x[c(2,1)]
x <- list(a = list(10,12,14), b = c(3.14, 2.81))
x[c(2,1)]
x[[c(2,1)]]
x <- matrix(1:6, 2, 3)
x[1,2]
x[1,3]
x
x[1,2]
x[1,]
x$a
x <- list(aardarw = 1:5)
x$a
x["a"]
x["a", exact = FALSE]
x[["a", exact = FALSE]]
x[["a"]]
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x(!bad)
x[!bad]
y <- x[!bad]
y
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x,y)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x,y)
good
x[good]
y[good]
y <- c("a", "b", NA, NA, NA, "f")
good <- complete.cases(x,y)
good
x[good]
y[good]
x + y
x <- 1:4; y <- 6:9
x + y
x * y
x / y
x >= 2
y ==8
x >= 2; y ==8
x + y; x * y; x / y
good; x[good]; y[good]
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, NA, NA, "f")
good <- complete.cases(x,y)
good; x[good]; y[good]
x[1]; x[[1]]; x$bar; x["bar"]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[1]; x[[1]]; x$bar; x["bar"]
x[1]; x[[1]];
x$bar; x["bar"]
x <- matrix (1:4,2,2); y <- matrix(rep(10,4), 2, 2)
x*y
x/y
x %*% y
x %*% y # true matrix multiplication
install.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirtl()
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
9
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?
?c
c()
?c
z
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)
C(1,2,3,4) + C(0,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
0
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir = dir()
old.dir <- getwd()
exit
setwd("D:/Software Engineering/Coding/R programing")
getwd()
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R","folder1", "folder2")
file.path(folder1", "folder2")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
swirl()
da <- c("Mot", "Hai", "Ba", "Bon", "Nam", "Sau", "Bay", "Tam")
da[1]
mean(x)
mean(x)
traceback()
lm(y-x)
traceback()
debug()
lm(y-x)
debug()
debug(lm)
lm(y-x)
options(error = recover)
read.csv("nosuchfile")
exists()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
1
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags_animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
sapply(iris, mean)
colMeans(iris)
iris
iris
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
debug(ls)
debug(ls)
ls(1)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
split(x,f)
library(datasets)
data(iris)
head(iris)
data(iris)
head(iris)
0
exit()
library(datasets)
data(iris)
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl,mean)
str(str)
str(lm)
str(lm)
str(lm)
x <- rnorm(100,2,4)
summary(x)
str(x)
f <- gl(40,10)
str(f)
f
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
m
s <- split(airquality, airquality$Month)
str(s)
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(2000)
system.time(svd(x))
system.time({
n <- 1000
r <- numeric(n)
for(i in i:n){
x <- rnorm(n)
r[i] <- mean(x)
}
})
system.time({
n <- 1000
r <- numeric(n)
for(i in i:n){
x <- rnorm(n)
r[i] <- mean(x)
}
})
system.time({
n <- 1000
r <- numeric(n)
for(i in 1:n){
x <- rnorm(n)
r[i] <- mean(x)
}
})
sample.interval = 10000
## lm(y~x)
sample.interval = 10000
lm(y~x)
sample.interval = 10000
$by.total
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
setwd("D:/GitHub/Coursera/Course 2 - R Programming/Course 2 - Practise")
source("rankhospital.R")
data_outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(data_outcome[, 7])
states <- sort(states)
states
rankall <- function(outcome, num = "best") {
## Check that state and outcome are valid
df <- data.frame(Hospital.Name=character(),
State=character())
## For each state, find the hospital of the given rank
for(i in states)
{
df <- rbind(df, data.frame(rankhospital(i, outcome, num), i))
}
## Return a data frame with the hospital names and the (abbreviated) state name
df
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
