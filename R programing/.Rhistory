x <- 5
y <- if(x>3){
10
}else {
0
}
y
for (i in 1:10){
print(i)
}
x <- c("a", "b", "c", "d")
for(i in seq_along(x)){
print(x[i])
}
for(i in 1:4){
print(x[i])
}
for(letter in x){
print(letter)
}
x <- matrix(1:6, 2, 3)
x
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
count <- 0
while(count<1){
print(count)
count <- count + 1
}
while(count<10){
print(count)
count <- count + 1
}
tol <- 1e-8
x0 <- 1
tol
repeat {
x1 <- computeEstimate()
if(abs(x1-x0) < tol){
break
} else {
x0 <- x1
}
}
add2 <- function(x,y){
x + y
}
add2(3,5)
above10 <- function(x){
use <- x > 10
x[use]
}
above10(c(1,3,11))
above(c(1,3,11),5)
above <- function(x,n){
use <- x > n
x[use]
}
above(c(1,3,11),5)
numeric(3)
column_mean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] = mean(x[,i])
}
}
matrix1 <- matrix(1:6, 2, 3)
column_mean(matrix1)
column_mean(matrix1)
print(column_mean(matrix1))
matrix1
ncol(matrix1)
nc <- ncol(matrix1)
nc
column_mean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
column_mean(matrix1)
args(paste)
search()
make.power <- function(n){
pow <- function(x){
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
View(make.power)
View(make.power)
View(cube)
View(column_mean)
View(add2)
View(above10)
View(above)
View(add2)
ls(environment(cube))
get("n", environment(cube))
get("pow", environment(cube))
ls(environment(square))
get("n", environment(square))
get("pow", environment(square))
View(square)
View(square)
View(square)
g <- function(x){
x*y
}
f <- function(x){
y <- 2
y^2 + g(x)
}
f(3)
f <- function(x){
y <- 2
y^2 + g(x)
}
g <- function(x){
x*y
}
f(3)
y<-10
f <- function(x){
y <- 2
y^2 + g(x)
}
g <- function(x){
x*y
}
f(3)
source('D:/Software Engineering/Coding/R programing/Course 2 - R programming.R')
source('D:/Software Engineering/Coding/R programing/Course 2 - R programming.R')
x <- as.Date("1970-01-01")
unclass(x)
unclass(as.Date("1970-01-02"))
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
p$sec; p$min
p$sec; p$min; p$mon; p$wday; p$yday; p$zone; p$gmtoff
p$sec; p$min; p$mon; p$wday; p$yday; p$zone; p$gmtoff
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d %Y %H:%M")
x
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x <- as.Date("2012-03-01"); y <- as.Date("2012-02-28")
x-y
swirl()
library(swirl)
swirl()
exit()
info()
skip()
main()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE, TRUE, TRUE)
TRUE & c(TRUE, TRUE, TRUE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
info()
function(){ x }
nxt()
function(x){x}
function(x){}
boring_function <- function(x) {
x
}
boring_function <- function(x) {
x
}nxt()
nxt()
boring_function <- function(x) {
x
}
submit()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
mean(my_vector)
}
submit()
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
my_mean(c(4,5,10))
remainder <- function(num, divisor = 3) {
num %% divisor
}
submit()
remainder <- function(num, divisor = 2) {
num %% divisor
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
func(data)
}
submit()
evaluate <- function(func, dat){
func(dat)
}
submit()
evaluate <- function(func, dat){
func(dat)
}
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate (function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste(..., sep = " ", collapse = NULL)
}
telegram <- function(...){
paste(..., sep = " ", collapse = NULL)
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = " ", collapse = NULL)
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = " ", collapse = NULL)
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = " ")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = " ", collapse = NULL)
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram("One two three")
mad_libs <- function(...){
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(..., place, adjective, noun){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(place = "PT", adjective = "Beautiful", noun = "good")
"%p%" <- function(x, y ){
paste(x, y)
}
submit()
"%p%" <- function(x, y ){
paste(x, y, rep = " ")
}
submit()
"%p%" <- function(x, y ){
paste(x, y)
}
submit()
"%p%" <- function(x, y ){
paste(x, y)
}
submit()
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"%p%" <- function(left, right){
paste(left, right, sep = " ", collapse = NULL)
}
submit()
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
